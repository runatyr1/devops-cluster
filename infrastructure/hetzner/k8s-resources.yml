---
# Handles containers and k8s manifests state at the dirs specified below
- hosts: all
  become: yes
  vars_files:
    - secret_vars.yml
  vars:
    docker_images_path: "../../kubernetes/dockerfiles"
    k8s_manifests_path: "../../kubernetes/base/manifests"
    helm_charts_path: "../../kubernetes/base/helm" 
    registry_name: "local-registry"
    registry_port: "5000"
    ansible_become_pass: "{{ ansible_become_pass }}"
    helm_deployments:
      - name: "white"
        namespace: "white"
        chart: "oci://registry-1.docker.io/bitnamicharts/nginx"  # Using OCI registry
        repository: ""  # No repository needed for OCI registry
        values_file: "{{ helm_charts_path }}/white/values.yaml"
      - name: "black"
        namespace: "black"
        chart: "oci://registry-1.docker.io/bitnamicharts/nginx"
        repository: ""
        values_file: "{{ helm_charts_path }}/black/values.yaml"
  
  pre_tasks:
    # Check Kubernetes initialization
    - name: Check if Kubernetes is initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_check

    - name: Fail if Kubernetes is not initialized
      fail:
        msg: "Kubernetes is not initialized. Please run bootstrap.yml first"
      when: not k8s_check.stat.exists

    # Container pre-tasks:
    - name: Check if Docker is installed locally
      command: docker --version
      delegate_to: localhost
      become: no
      register: docker_check
      ignore_errors: yes
      changed_when: false

    - name: Fail if Docker is not installed
      fail:
        msg: "Docker is not installed on localhost. Please install Docker first."
      when: docker_check.rc != 0
      delegate_to: localhost
      become: no

    - name: Check if Docker is running locally
      command: docker info
      delegate_to: localhost
      become: no
      register: docker_running
      ignore_errors: yes
      changed_when: false

    - name: Fail if Docker is not running
      fail:
        msg: "Docker is not running on localhost. Please start Docker service."
      when: docker_running.rc != 0
      delegate_to: localhost
      become: no

    - name: Check if registry container exists
      shell: docker ps -a --filter name={{ registry_name }} --format "{% raw %}{{.Names}}{% endraw %}"
      delegate_to: localhost
      become: no
      register: registry_exists
      changed_when: false

    - name: Check if registry is running
      shell: docker ps --filter name={{ registry_name }} --format "{% raw %}{{.Names}}{% endraw %}"
      delegate_to: localhost
      become: no
      register: registry_running
      changed_when: false

    - name: Start registry if exists but not running
      command: docker start {{ registry_name }}
      delegate_to: localhost
      become: no
      when: 
        - registry_exists.stdout == registry_name
        - registry_running.stdout != registry_name

    - name: Create registry if doesn't exist
      command: docker run -d --restart always -p {{ registry_port }}:5000 --name {{ registry_name }} registry:2
      delegate_to: localhost
      become: no
      when: registry_exists.stdout != registry_name

    - name: Wait for registry to be ready
      uri:
        url: "http://localhost:{{ registry_port }}/v2/_catalog"
        method: GET
      register: registry_health
      until: registry_health.status == 200
      retries: 5
      delay: 2
      delegate_to: localhost
      become: no

    - name: Ensure required python packages are installed
      apt:
        name: 
          - python3-pip
          - python3-dev
          - python3-kubernetes
        state: present
        update_cache: yes
      delegate_to: localhost
      become: yes

  
  tasks:

    # Container tasks:
    # Always rebuilds all images, I've tried tracking file content, it's cumbersome
    # Probably would need other method than ansible
    - name: Find all Dockerfiles
      find:
        paths: "{{ docker_images_path }}"
        patterns: "Dockerfile"
        recurse: yes
      delegate_to: localhost
      become: no
      register: dockerfiles
    
    - name: Build Docker images
      docker_image:
        build:
          path: "{{ item.path | dirname }}"
          pull: yes
        name: "localhost:{{ registry_port }}/{{ item.path | dirname | basename }}"
        tag: latest
        source: build
        force_source: yes
      loop: "{{ dockerfiles.files }}"
      delegate_to: localhost
      become: no
        
    - name: Save Docker images
      shell: |
        docker save -o "/tmp/{{ item.path | dirname | basename }}.tar" \
        localhost:5000/{{ item.path | dirname | basename }}:latest
      loop: "{{ dockerfiles.files }}"
      delegate_to: localhost
      become: no
      changed_when: false
    
    - name: Copy image to remote host
      copy:
        src: "/tmp/{{ item.path | dirname | basename }}.tar"
        dest: "/tmp/{{ item.path | dirname | basename }}.tar"
      loop: "{{ dockerfiles.files }}"
      delegate_to: k8s_master
      become: yes
    
    - name: Remove existing image from containerd
      shell: |
        ctr -n=k8s.io image rm localhost:5000/{{ item.path | dirname | basename }}:latest || true
      loop: "{{ dockerfiles.files }}"
      delegate_to: k8s_master
      become: yes
      changed_when: false
    
    - name: Import image to containerd
      shell: |
        ctr -n=k8s.io images import "/tmp/{{ item.path | dirname | basename }}.tar"
      loop: "{{ dockerfiles.files }}"
      delegate_to: k8s_master
      become: yes
      changed_when: false

    # Created needed dirs in host:
    - name: Create CIS reports directory
      file:
        path: /var/log/cis-linux-and-kube-bench
        state: directory
        mode: '0755'

    # Apply kuberentes config, this updates resources, but doesn't delete:
    - name: Find all K8s manifests
      find:
        paths: "{{ k8s_manifests_path }}"
        patterns: "*.yaml,*.yml"
        recurse: no
      delegate_to: localhost
      become: no
      register: k8s_files

    # Tried with apply --force and doesn't work for pods, using replace:    
    - name: Apply all Kubernetes manifests with replace
      ansible.builtin.shell: 
        cmd: "kubectl replace --force -f {{ item.path }}"
      loop: "{{ k8s_files.files }}"
      delegate_to: localhost
      become: no
      register: kubectl_apply_result
      changed_when: "'configured' in kubectl_apply_result.stdout or 'created' in kubectl_apply_result.stdout"
      ignore_errors: yes  # This will allow other files to be processed even if one fails
        

        
    # This two step allows trying graceful apply or forcing if it failed
#    - name: Force apply if previous attempt failed
#      kubernetes.core.k8s:
#        state: present
#        src: "{{ item.item.path }}"
#        apply: yes
#        force: yes
#        wait: yes
#        wait_timeout: 60
#      when: item is failed
#      loop: "{{ apply_result.results }}"
#      delegate_to: localhost
#      become: no
#      vars:
#        ansible_python_interpreter: /usr/bin/python3

# Adding repos disabled as we are using OCI registry, but it might be needed later 
#    - name: Add Helm repositories
#      kubernetes.core.helm_repository:
#        name: "{{ item.name }}"
#        repo_url: "{{ item.url }}"
#      loop:
#        - { name: nginx, url: https://nginx.github.io/helm-charts }
#      delegate_to: localhost
#      become: no

    - name: Deploy Helm charts
      kubernetes.core.helm:
        name: "{{ item.name }}"
        chart_ref: "{{ item.chart }}"
        release_namespace: "{{ item.namespace }}"
        create_namespace: true
        values_files: 
          - "{{ item.values_file }}"
        wait: true
        wait_timeout: "300s"  # Changed from 300 to "300s"
        force: false
      loop: "{{ helm_deployments }}"
      delegate_to: localhost
      become: no
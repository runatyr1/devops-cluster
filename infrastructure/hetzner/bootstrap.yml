---
# Ansible bootstrap.yml
# This version of bootstrap.yml downloads packages and container images locally, anc copy them to the server
# In order to workaround hetzner having issues contacting k8s repos
- hosts: all
  become: yes
  vars:
    kubernetes_version: "1.29"
    pod_network_cidr: "10.244.0.0/16"
    helm_gpg_key_path: /usr/share/keyrings/helm.gpg
    containerd_config_path: /etc/containerd/config.toml
  vars_files:
    - secret_vars.yml

  handlers:
    - name: Restart containerd
      service:
        name: containerd
        state: restarted
    - name: Reboot system
      reboot:
        reboot_timeout: 3600
    - name: Restart sshd
      service:
        name: sshd
        state: restarted
    - name: Reload UFW
      ufw:
        state: reloaded
    - name: Save iptables
      command: netfilter-persistent save
      changed_when: true

  tasks:
    - name: Configure kernel parameters for cgroups
      lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX="(.*)"'
        line: 'GRUB_CMDLINE_LINUX="${1} systemd.unified_cgroup_hierarchy=1"'
        backrefs: yes
      register: grub_updated
    
    - name: Update grub
      command: update-grub
      when: grub_updated.changed
    
    - name: Reboot immediately if grub was updated
      reboot:
        reboot_timeout: 3600
      when: grub_updated.changed
    
    - name: Install dependencies
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - netfilter-persistent
          - iptables-persistent
        state: present
        update_cache: yes
   
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade system packages
      apt:
        upgrade: yes

    - name: Install containerd
      apt:
        name: containerd.io
        state: present

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate containerd config
      copy:
        dest: "{{ containerd_config_path }}"
        mode: '0644'
        content: |
          version = 2
          root = "/var/lib/containerd"
          state = "/run/containerd"
          
          disabled_plugins = []
          required_plugins = ["io.containerd.grpc.v1.cri"]
          
          [grpc]
            address = "/run/containerd/containerd.sock"
            tcp_address = ""
            tcp_tls_cert = ""
            tcp_tls_key = ""
          
          [plugins."io.containerd.grpc.v1.cri"]
            stream_server_address = "127.0.0.1"
            stream_server_port = "0"
            enable_selinux = false
            sandbox_image = "registry.k8s.io/pause:3.10"
            stats_collect_period = 10
            enable_tls_streaming = false
            max_container_log_line_size = 16384
          
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
            default_runtime_name = "runc"
            no_pivot = false
          
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
            runtime_engine = ""
            runtime_root = ""
            privileged_without_host_devices = false
            base_runtime_spec = ""
          
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
          
          [plugins."io.containerd.grpc.v1.cri".cni]
            bin_dir = "/opt/cni/bin"
            conf_dir = "/etc/cni/net.d"
          
          [plugins."io.containerd.grpc.v1.cri".registry]
            config_path = ""
    

    
    - name: Enable and restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes
      register: containerd_restart 

    - name: Wait for containerd to be ready
      wait_for:
        path: /run/containerd/containerd.sock
        state: present
        delay: 5
        timeout: 30

# Had to download packages in localhost as hetzner sometimes has issues connecting to repo
    - name: Download Kubernetes packages and dependencies on Ansible control node
      block:
        - name: Download Kubernetes packages with all dependencies
          shell: |
            apt-get download kubelet kubeadm kubectl cri-tools kubernetes-cni
          args:
            chdir: /tmp
          delegate_to: localhost
          become: yes
          register: k8s_packages
          changed_when: false

    - name: Find all downloaded package files
      find:
        paths: /tmp
        patterns: 
          - '*kubelet_*.deb'
          - '*kubeadm_*.deb'
          - '*kubectl_*.deb'
          - '*cri-tools_*.deb'
          - '*kubernetes-cni_*.deb'
      delegate_to: localhost
      register: package_files

    - name: Copy all Kubernetes and related packages to remote host
      copy:
        src: "{{ item.path }}"
        dest: "/tmp/{{ item.path | basename }}"
        mode: '0644'
      loop: "{{ package_files.files }}"
      loop_control:
        label: "{{ item.path | basename }}"

    - name: Install all Kubernetes packages manually with dependencies
      shell: |
        dpkg -i /tmp/*.deb
        apt-get install -f -y
    
    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Enable and start kubelet
      systemd:
        name: kubelet
        state: started
        enabled: yes
        daemon_reload: yes
    
    - name: Wait for kubelet to start
      wait_for:
        timeout: 10
      register: wait_kubelet
    
    - name: Debug kubelet status after start
      shell: systemctl status kubelet
      register: kubelet_status_after
      failed_when: false
      changed_when: false
    
    - name: Add Helm GPG key
      shell: curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null
      args:
        creates: /usr/share/keyrings/helm.gpg

    - name: Add Helm repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
        state: present
        filename: helm-stable-debian
        update_cache: yes  # Add this line to update cache after adding repo

    - name: Install Helm
      apt:
        name: helm
        state: present


    - name: Check swap status
      command: swapon --show
      register: swap_status
      changed_when: false

    - name: Disable swap
      command: swapoff -a
      when: swap_status.stdout != ""
      changed_when: swap_status.stdout != ""

    - name: Remove swap from fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Check if kernel modules config exists
      stat:
        path: /etc/modules-load.d/k8s.conf
      register: kernel_modules_conf

    - name: Configure kernel modules
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
      when: not kernel_modules_conf.stat.exists

    - name: Check loaded kernel modules
      shell: lsmod | grep -E '^(overlay|br_netfilter)'
      register: loaded_modules
      changed_when: false
      failed_when: false

    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
      when: "item not in loaded_modules.stdout"

    - name: Configure sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/99-kubernetes.conf
        sysctl_set: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
        - { name: 'vm.swappiness', value: '0' }
        - { name: 'net.ipv4.conf.all.forwarding', value: '1' }
        - { name: 'net.core.somaxconn', value: '32768' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '8096' }
        - { name: 'net.ipv4.tcp_tw_reuse', value: '1' }
    
    - name: Check if Kubernetes cluster exists
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_config

    - name: Debug kubelet status
      shell: |
        systemctl status kubelet
        journalctl -u kubelet --no-pager -n 50
      register: kubelet_status
      failed_when: false
      changed_when: false
    
    - name: Show kubelet status
      debug:
        var: kubelet_status.stdout_lines
    
    - name: Debug kernel modules
      shell: lsmod | grep -E '^(overlay|br_netfilter)'
      register: kernel_modules_check
      failed_when: false
      changed_when: false
    
    - name: Show loaded kernel modules
      debug:
        var: kernel_modules_check.stdout_lines
    
    - name: Debug etcd status
      shell: |
        crictl ps | grep etcd || true
        for container in $(crictl ps | grep etcd | awk '{print $1}'); do
          echo "=== Logs for container $container ==="
          crictl logs $container
        done
      register: etcd_status
      failed_when: false
      changed_when: false
    
    - name: Show etcd status
      debug:
        var: etcd_status.stdout_lines

# Doing manual image pull as hetzner sometimes fails
    - name: Prepare Kubernetes control plane images locally
      block:
        - name: Create local image download directory
          file:
            path: /tmp/k8s-images
            state: directory
          delegate_to: localhost

    - name: Pull and save Kubernetes images locally
      shell: |
        #!/bin/bash
        set -e
        
        images=(
          "registry.k8s.io/kube-apiserver:v1.32.0"
          "registry.k8s.io/kube-controller-manager:v1.32.0"
          "registry.k8s.io/kube-scheduler:v1.32.0"
          "registry.k8s.io/coredns/coredns:v1.11.3"
          "registry.k8s.io/pause:3.10"
          "registry.k8s.io/etcd:3.5.16-0"
        )
        
        for image in "${images[@]}"; do
          # Pull the image
          ctr -n=k8s.io image pull "$image"
          
          # Save the image
          filename="/tmp/k8s-images/$(echo "$image" | tr '/:' '_').tar"
          ctr -n=k8s.io image export "$filename" "$image"
        done
        
        # List the saved images
        ls -l /tmp/k8s-images/
      args:
        executable: /bin/bash
      delegate_to: localhost
      register: image_pull_result
      changed_when: false

    - name: Find downloaded image files
      find:
        paths: /tmp/k8s-images
        patterns: '*.tar'
      delegate_to: localhost
      register: image_files

    - name: Ensure images directory exists on remote
      file:
        path: /tmp/k8s-images
        state: directory

    - name: Copy images to remote server
      copy:
        src: "{{ item.path }}"
        dest: "/tmp/k8s-images/{{ item.path | basename }}"
      loop: "{{ image_files.files }}"
      loop_control:
        label: "{{ item.path | basename }}"

    - name: Load images on remote server
      shell: |
        for image_file in /tmp/k8s-images/*.tar; do
          ctr -n=k8s.io image import "$image_file"
        done
      args:
        executable: /bin/bash

    - name: Clean up local image files
      file:
        path: /tmp/k8s-images
        state: absent
      delegate_to: localhost


    - name: Initialize Kubernetes cluster
      command: >
        kubeadm init
        --pod-network-cidr={{ pod_network_cidr }}
        --skip-phases=addon/kube-proxy
      register: kubeadm_init
      when: not k8s_config.stat.exists
      changed_when: kubeadm_init.rc == 0
      failed_when: 
        - kubeadm_init.rc != 0
        - "'already exists' not in kubeadm_init.stderr"

    - name: Create .kube directory
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

    - name: Check if kubeconfig exists
      stat:
        path: /root/.kube/config
      register: kubeconfig

    - name: Copy admin.conf to root's .kube directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        mode: '0600'
      when: not kubeconfig.stat.exists

    - name: Wait for Kubernetes API
      wait_for:
        host: "{{ ansible_host }}"
        port: 6443
        timeout: 300
      when: not k8s_config.stat.exists



    # System hardening
    - name: Configure additional security parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/99-kubernetes.conf
        sysctl_set: yes
      loop:
        - { name: 'net.ipv4.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_source_route', value: '0' }

    - name: Configure SSH security settings
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        validate: '/usr/sbin/sshd -t -f %s'
      loop:
        - { regexp: '^#?ClientAliveInterval.*', line: 'ClientAliveInterval 300' }
        - { regexp: '^#?ClientAliveCountMax.*', line: 'ClientAliveCountMax 2' }
        - { regexp: '^#?MaxStartups.*', line: 'MaxStartups 10:30:60' }
      notify: Restart sshd

    - name: Ensure secure permissions on Kubernetes PKI
      file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
        owner: root
        group: root
        state: directory
      loop:
        - { path: '/etc/kubernetes/pki', mode: '0700' }
      when: k8s_config.stat.exists

    - name: Ensure secure permissions on Kubernetes CA key
      file:
        path: /etc/kubernetes/pki/ca.key
        mode: '0400'
        owner: root
        group: root
      when: k8s_config.stat.exists

    # Configure firewall
    - name: Install UFW
      apt:
        name: ufw
        state: present
    
    - name: Allow SSH first
      ufw:
        rule: allow
        port: 22
        proto: tcp
        comment: "SSH access"

    - name: Configure UFW defaults
      ufw:
        state: enabled
        default: deny
        direction: incoming
        logging: on
      notify: Reload UFW

    - name: Configure remaining K8s UFW rules
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        comment: "{{ item.comment }}"
      loop:
        - { port: 6443, proto: tcp, comment: "Kubernetes API Server" }
        - { port: 2379, proto: tcp, comment: "etcd client API" }
        - { port: 2380, proto: tcp, comment: "etcd server API" }
        - { port: 10250, proto: tcp, comment: "Kubelet API" }
        - { port: 4240, proto: tcp, comment: "Cilium health checks" }
        - { port: 4244, proto: tcp, comment: "Cilium Hubble Server" }
        - { port: 8472, proto: udp, comment: "VXLAN overlay" }
    
    # Disable kernel modules that aren't needed
    - name: Configure extended kernel module blacklist
      copy:
        dest: /etc/modprobe.d/kubernetes-blacklist.conf
        content: |
          # Hardware modules not needed in cloud VMs
          blacklist pcspkr
          blacklist thunderbolt
          blacklist bluetooth
          blacklist firewire-core
          blacklist psmouse
          blacklist joydev
          blacklist serio_raw
          blacklist cdrom
          blacklist sr_mod
          
          # Power management modules not needed in cloud
          blacklist intel_rapl_msr
          blacklist intel_rapl_common
          blacklist intel_uncore_frequency_common
          blacklist rapl
          
          # Graphics-related modules not needed for headless operation
          blacklist bochs
          blacklist virtio_gpu
          blacklist drm_vram_helper
          blacklist drm
          blacklist drm_kms_helper
          
          # Other unnecessary hardware
          blacklist i2c_i801
          blacklist lpc_ich
        mode: '0644'
      register: blacklist_conf

    - name: Update initramfs after module blacklist
      command: update-initramfs -u
      when: blacklist_conf.changed

    - name: Reboot if kernel module blacklist changed
      reboot:
        msg: "Rebooting due to kernel module blacklist changes"
        reboot_timeout: 3600
      when: blacklist_conf.changed

    - name: Remove unnecessary packages
      apt:
        name:
          - at                 # Task scheduler - use systemd timers instead
          - aptitude           # pkg manager not needed as we have apt
          - aptitude-common    # pkg manager not needed as we have apt
          - genisoimage        # ISO creation tool not needed on k8s node
          - groff-base         # Documentation formatting
          - man-db             # Man pages database
          - manpages           # Manual pages
          - inetutils-telnet   # Insecure telnet client
        state: absent
        purge: true
        autoremove: true
      become: true
    



    # Cilium
    - name: Add Cilium helm repository
      kubernetes.core.helm_repository:
        name: cilium
        repo_url: https://helm.cilium.io/

    - name: Check if cilium is installed
      kubernetes.core.helm_info:
        name: cilium
        namespace: kube-system
      register: cilium_status
      ignore_errors: yes

    - name: Install Cilium
      kubernetes.core.helm:
        name: cilium
        chart_ref: cilium/cilium
        release_namespace: kube-system
        values:
          kubeProxyReplacement: true
          k8sServiceHost: "{{ ansible_host }}"
          k8sServicePort: 6443
      when: cilium_status.status is undefined or cilium_status.status.status != 'deployed'

    - name: Install additional system utilities
      apt:
        name: 
          - ipvsadm
          - jq
          - nfs-common
        state: present

    - name: Check control-plane taint
      command: kubectl get node {{ ansible_hostname }} -o jsonpath='{.spec.taints[*].key}'
      register: node_taints
      changed_when: false

    - name: Remove control-plane taint
      command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      when: "'control-plane' in node_taints.stdout"
      changed_when: true